#!/usr/local/bin/sms -qi
# The vert tool allows you to use a vert function.
# example@ let houseWidth = vert(20,@m,@yd);
# This stores 20 meters, converted to yards
# If you call this with sms, use sms -i vert.sms

cxLet(parent(_scratch), @vert, (x,u1,u2)=>{
    cxLet(parent(self),@_errHandler,(x)=>{putLn(str(x));x});
    
    # Import the tools for each dimension if necessary
    if(~(cxHasFar(self,@mratios))){
      let mratios=fileParse("mvert.sms");
      let lratios=fileParse("lvert.sms");
      let tratios=fileParse("tvert.sms");
      cxImport(self,parent(self));
    };
    
    # Generic convert function
    let convert=(x,u1,u2,ratioCX)=>{
      let normalized = x / cxGet(ratioCX,u1);
      let value = normalized * cxGet(ratioCX,u2);
      putLn(str(x) str+ str(u1) str+ " = " str+
        str(value) str+ str(u2));
      return value;
    };

    # Find a CX that contains both units u1 and u2

    # Mass
    if(cxHas(mratios,u1) && cxHas(mratios,u2))
     return convert(x,u1,u2,mratios);

    # Length
    if(cxHas(lratios,u1) && cxHas(lratios,u2))
      return convert(x,u1,u2,lratios);

    # Time
    if(cxHas(tratios,u1) && cxHas(tratios,u2))
     return convert(x,u1,u2,tratios);

    # We must have supplied something invalid
    putLn("The following units are allowed:");
    putLn("Mass Units:");
    putLn(str(cxKeys(mratios)) str+ "\n");
    putLn("Length Units:");
    putLn(str(cxKeys(lratios)) str+ "\n");
    putLn("Time Units:");
    putLn(str(cxKeys(tratios)) str+ "\n");
    putLn("Conversions must remain in the same dimension.");
});
