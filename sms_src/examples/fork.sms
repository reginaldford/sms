#!/usr/local/bin/sms -m300

# Requires lots of RAM until last moment gc is implemented.
# We run fib twice simultaneously with different size jobs
{
  # Set the Fib numbers here
  let n1=32;
  let n2=31;

  # Recursive definition of fib
  let fib = (n) => if( n < 2  ) 1  else fib(n - 1) + fib(n - 2);

  # The program splits into 2 programs here
  let pid1 = osFork();
  let pid2 = false;

  if( pid1 == 0 )
    putLn("Child 1: answer: " str+ toStr(fib(n1)))
  else {
    pid2 = osFork();
    if(pid2 == 0)
      putLn("Child 2: answer: " str+ toStr(fib(n2)));
  };

  if( not( pid1 == 0) and not(pid2==0) )
  { putLn("Parent: Child 1 has pid " str+ toStr(pid1));
    putLn("Parent: Child 2 has pid " str+ toStr(pid2));
    let done1 = osWait();
    putLn("Parent: Program with pid " str+ toStr(done1[0]) str+
      " Completed with Return Code: " str+ toStr(done1[1]));
  };

  if(  not( pid1 == 0) and not(pid2==0) )
  { let done2 = osWait();
    putLn("Parent: Program with pid " str+ toStr(done2[0]) str+
      " Completed with Return Code: " str+ toStr(done2[1]));
  };
};
