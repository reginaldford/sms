#!/usr/local/bin/sms -qi

cxLet(parent(self),:vert,(x,u1,u2)=>{
    # Import the tools for each dimension if necessary
    if(not(cxHasFar(self,:mvert))){
      cxEval(parent(self),fileParse("mvert.sms"));
      cxEval(parent(self),fileParse("lvert.sms"));
      cxEval(parent(self),fileParse("tvert.sms"));
    };
    # This function is the generic tool which finds
    # a dimension that contains both units u1 and u2
    # Mass
    if(cxGet(mratios.kg,u1) and cxGet(mratios.kg,u2))
      return(mvert(x,u1,u2));
    # Length
    if(cxGet(lratios.m,u1) and cxGet(lratios.m,u2))
      return(lvert(x,u1,u2));
    # Time
    if(cxGet(tratios.s,u1) and cxGet(tratios.s,u2))
      return(tvert(x,u1,u2));
    # We must've supplied something invalid
    putln("The following units are allowed:");
    putln("Mass Units:");
    putln(toStr(cxKeys(mratios.kg)) str+ "\n");
    putln("Length Units:");
    putln(toStr(cxKeys(lratios.m)) str+ "\n");
    putln("Time Units:");
    putln(toStr(cxKeys(tratios.s)) str+ "\n");
    putln("Conversions must remain in the same dimension.");
  }
);
